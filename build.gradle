plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'eclipse'
	id 'maven-publish'
}

repositories {
    mavenCentral()
}

group = "io.github.clearlybaffled"
version = '1.0'

sourceSets {
   functionalTest {
      groovy.srcDir file('src/functionalTest/groovy')
      resources.srcDir file('src/test/resources')
      compileClasspath += sourceSets.main.output + configurations.testRuntime
      runtimeClasspath += output + compileClasspath
   }

   }
dependencies {
    
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
    testCompile 'org.hamcrest:hamcrest-core:1.3'

	testImplementation gradleTestKit()
	testImplementation 'junit:junit:4.12'
	
	functionalTestImplementation('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }
}


// Add a source set for the functional test suite


gradlePlugin {
   // Define the plugin
   plugins {
      fortran {
         id = 'io.github.clearlybaffled'
         implementationClass = 'io.github.clearlybaffled.gradle.language.fortran.FortranPlugin'
      }
   }
   testSourceSets sourceSets.functionalTest
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}


publishing {
	repositories {
		mavenLocal()
	}
}

wrapper {
   distributionType = Wrapper.DistributionType.ALL
}

plugins.withType(EclipsePlugin) {
    plugins.withType(JavaBasePlugin) {
        eclipse {
            classpath {
                file {
                    whenMerged { classpath ->
                        String gradleHome = gradle.getGradleHomeDir()
                            .absolutePath
                            .replace(File.separator, '/')
                        String gradleSourceDirectory = "${gradleHome}/src"
                        classpath.entries.each { entry ->
                            if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary
                                    && entry.library.path.contains('generated-gradle-jars')) {
                                entry.sourcePath =
                                    new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
                                        .fromPath(gradleSourceDirectory)
                            }
                        }
                    }
                }
            }
        }
    }
}
