/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.4/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
    id 'eclipse'
}

repositories {
	mavenCentral()
}

dependencies {
    // Use the awesome Spock testing and specification framework
	testImplementation 'junit:junit:4.12'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
	testImplementation gradleTestKit()
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'io.github.clearlybaffled.fortran'
            implementationClass = 'io.github.clearlybaffled.gradle.nativeplugin.toolchain.plugins.GradleFortranPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

plugins.withType(EclipsePlugin) {
	plugins.withType(JavaBasePlugin) {
		eclipse {
			classpath {
				file {
					whenMerged { classpath ->
						String gradleHome = gradle.getGradleHomeDir()
							.absolutePath
							.replace(File.separator, '/')
						String gradleSourceDirectory = "${gradleHome}/src"
						classpath.entries.each { entry ->
							if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary
									&& entry.library.path.contains('generated-gradle-jars')) {
								entry.sourcePath =
									new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
										.fromPath(gradleSourceDirectory)
							}
						}
					}
				}
			}
		}
	}
}