/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package io.github.clearlybaffled.gradle.nativeplugin.toolchain.plugins

import static org.gradle.testkit.runner.TaskOutcome.*
import static org.junit.Assert.*;

import org.gradle.api.tasks.SkipWhenEmpty
import org.gradle.testkit.runner.GradleRunner
import org.junit.Ignore
import org.junit.Rule
import org.junit.rules.TemporaryFolder

import spock.lang.Specification


class GradleFortranPluginFunctionalTest extends Specification {
/*
	@Rule TemporaryFolder testProjectDir = new TemporaryFolder()
	File buildFile
	File srcDir

	def setup() {
		buildFile = testProjectDir.newFile('build.gradle')
		buildFile << """
            plugins {
                id 'io.github.clearlybaffled.fortran'
            }
        """.stripIndent()
		testProjectDir.newFolder("src","main","fortran")
		testProjectDir.newFile("src/main/fortran/hello.f") << """
			program hello
			      print *, "Hello, World!"
			end program hello
		""".stripIndent()
	
	}
	
	
    def "builds program"() {
        given:
		buildFile << """
			model {
				components {
					test(NativeExecutableSpec)
				}
			}
        """

        when:
	    def result = GradleRunner.create()
        	.forwardOutput()
	        .withPluginClasspath()
	        .withArguments("--stacktrace", "--info", "build")
			.withDebug(true)
	        .withProjectDir(testProjectDir.root)
			.build()
		
		
        then:
        //result.task(":assemble").outcome == SUCCESS
		//result.task(":build").outcome == SUCCESS
		
	
		
		assertTrue(new File("${testProjectDir.root.absolutePath}/build").exists())
    }
	*/
	def "builds from real filesystem"() {
		when:
		try {
		def result = GradleRunner.create()
			.forwardOutput()
			.withPluginClasspath()
			.withArguments("--stacktrace","--debug","build")
			.withDebug(true)
			.withProjectDir(new File("../oaml/lfbltab")) //src/test/resources/helloworld"))
			.build()
		} catch (ex) {
			println ex.message
		}
		then:
		1
	}
	
}
