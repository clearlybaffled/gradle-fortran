// This build file can be used to compile and link Fortran and C/C++ sources
// The trick:
//        1.  Define a set of ToolChains that redefine the C++ compiler as the Fortran compiler and 
//             set up the C compiler to compile both C and C++ code.  
//                  a.  First check for the existence of the Intel Fortran compiler and use it if it exists,
//                       if not check for the existence of the Gnu Fortran compiler
//                  b.  When defining the source sets for each binary, the user must be careful to only
//                        include Fortran sources for the Cpp compiler and C/C++ sources for the C compiler
//
//
//  Notes:
//           If the executables are built on Linux under CentOS7 with a verson of Gnu Fortran that is greater than 4.6,
//           then it is unlikely that they will run on CentOS6 because there is a library (libquadmath.so) that does not exist
//
import org.apache.tools.ant.taskdefs.condition.Os

// Determine which Fortran Compilers are available
def intelCheck = false
def gnuCheck = false
task checkCompilers {
    def gnuCommand
    def intelCommand 
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        intelCommand = ['cmd', '/c', 'ifort','-help','>intelHelp.txt']
        gnuCommand = ['cmd', '/c', 'gfortran.exe','-v']
    } else {
        intelCommand = ['sh','-c','ifort --version']
        gnuCommand = ['sh', '-c', 'gfortran -v']
    }
    Process proc = intelCommand.execute()
    proc.waitForOrKill(5000)
    intelCheck = !proc.exitValue()
    proc = gnuCommand.execute()
    proc.waitForOrKill(5000)
    gnuCheck = !proc.exitValue()
}
if (project.hasProperty("disableIntel") ) intelCheck = false
println " Intel Fortran Compiler Available : "  + intelCheck
println " Gnu Fortran Compiler Available : "  + gnuCheck

// Define settings to be used by all subprojects
    apply plugin: "cpp"
    apply plugin: "c"
    apply plugin: 'native-component'
    apply plugin: 'google-test-test-suite'

     // Define the model for all subprojects
    model {
		platforms {    // Build once for each architecture
			x86 {
				architecture "x86"
			}
			x64 {
				architecture "x86_64"
			}
		}
        // Define the ToolChains
        // Redefine the C++ compiler to be the Fortran Compiler
        // C and C++ code will be compiled with the C compilers
        toolChains {
            if (intelCheck) {
                intelFortran(Gcc) {
                  target 'x86', {
                        cCompiler.executable = "gcc"
                        cppCompiler.executable  = "ifort"
                        linker.executable = "ifort"            
                        cppCompiler.withArguments { args ->
                            args.remove "-x"
                            args.remove  "c++"
                        }
                    }
                  target 'x64', {
                        cCompiler.executable = "gcc"
                        cppCompiler.executable  = "ifort"
                        linker.executable = "ifort"            
                        cppCompiler.withArguments { args ->
                            args.remove "-x"
                            args.remove  "c++"
                        }
                    }
                }
            }
            // Gnu Fortran will be used if Intel Fortran is not available
            if (gnuCheck) {
                gnuFortran(Gcc) {
                  target 'x86' , {
                        cCompiler.executable = "gcc"
                        cppCompiler.executable = "gfortran"
                        linker.executable = "gfortran"
                        cppCompiler.withArguments { args ->
                                args.remove "-x"
                                args.remove  "c++"
                        }
                    }
                    target 'x64' , {
                        cCompiler.executable = "gcc"
                        cppCompiler.executable = "gfortran"
                        linker.executable = "gfortran"
                        cppCompiler.withArguments { args ->
                                args.remove "-x"
                                args.remove  "c++"
                        }
                    }
                }

            }
        }
        binaries {
            all {

                if (toolChain in Gcc) {

                    // Define compiler directives based on OS and flavor
                    def directive = flavor.getName() + '_BUILD'
                    cppCompiler.define directive

                    if (Os.isFamily(Os.FAMILY_WINDOWS))  {
                         cppCompiler.define "WIN32"
                         cCompiler.define "WIN32"
                    }
                    if (Os.isFamily(Os.FAMILY_UNIX))  cCompiler.define "UNIX"


                    // Turn on default optimizations 
                    cppCompiler.args "-O2"
                    cCompiler.args "-O3"
                    // Tell the c Compiler to determine language (C/C++) based on filename
                    cCompiler.args  "-x", "none"

                    // Common Compiler Options for Gnu
                    if (toolChain.name == 'gnuFortran') {
                      cppCompiler.define "GFORTRAN"
                      // Override default arguments supplied by Gradle that c++ compiler to compile all sources as C++ code
                      cppCompiler.args  "-x", "none"
                     // Turn on the compiler flag to allow pre-processor directives
                      cppCompiler.args "-cpp" 
                    }
                    // Common Compiler Options for Intel Fortran
                    if (toolChain.name == 'intelFortran') {
                      if (targetPlatform.name == 'acousticModel') {
                        if (Os.isFamily(Os.FAMILY_UNIX)) {
                          cCompiler.args "-march=core2","-Wall", "-ansi","-pendantic","-std=c99"
                        }
                          // Turn on the compiler flag to allow pre-processor directives
                          cppCompiler.args  "-fpp"
                          def INTEL_HOME = System.getenv('INTEL_HOME')
                          if (!INTEL_HOME) {
                              if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                                  INTEL_HOME = System.getenv('IFORT_COMPILER11')
                                  if (!INTEL_HOME) INTEL_HOME = System.getenv('IFORT_COMPILER10')
                                  if (!INTEL_HOME) INTEL_HOME = System.getenv('IFORT_COMPILER9')
                                  if (!INTEL_HOME) INTEL_HOME = System.getenv('IFORT_COMPILER8')
                              }
                              if (Os.isFamily(Os.FAMILY_UNIX)) {
                                 //INTEL_HOME = $(abspath $(shell which ifort)/../../..)
                              }
                          }
                          def LIBRARY_PATH = ''
                          if (INTEL_HOME) {
							LIBRARY_PATH  =  "${INTEL_HOME}/lib/ia32"
							if (buildType == buildTypes.x64bit) {
								LIBRARY_PATH  =  "${INTEL_HOME}/lib/intel64"
							}
                          }
                          // Later we might want to specifically link in Fortran libs but for now we 
                          // depend on the libs being set in the $LIB environment variable
                          // linker.args "-link -LIBPATH:${LIBRARY_PATH}"
                      }
                    }
                }
            }
        }
    }




